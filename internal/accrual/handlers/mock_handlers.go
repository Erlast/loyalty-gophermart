// Code generated by MockGen. DO NOT EDIT.
// Source: internal/accrual/handlers/handlers.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	models "github.com/Erlast/loyalty-gophermart.git/internal/accrual/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// FetchProducts mocks base method.
func (m *MockStorage) FetchProducts(ctx context.Context, orderID int64) ([]models.Items, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProducts", ctx, orderID)
	ret0, _ := ret[0].([]models.Items)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProducts indicates an expected call of FetchProducts.
func (mr *MockStorageMockRecorder) FetchProducts(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProducts", reflect.TypeOf((*MockStorage)(nil).FetchProducts), ctx, orderID)
}

// FetchRewardRules mocks base method.
func (m *MockStorage) FetchRewardRules(ctx context.Context) ([]models.Goods, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRewardRules", ctx)
	ret0, _ := ret[0].([]models.Goods)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRewardRules indicates an expected call of FetchRewardRules.
func (mr *MockStorageMockRecorder) FetchRewardRules(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRewardRules", reflect.TypeOf((*MockStorage)(nil).FetchRewardRules), ctx)
}

// GetByOrderNumber mocks base method.
func (m *MockStorage) GetByOrderNumber(ctx context.Context, orderNumber string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderNumber", ctx, orderNumber)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderNumber indicates an expected call of GetByOrderNumber.
func (mr *MockStorageMockRecorder) GetByOrderNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderNumber", reflect.TypeOf((*MockStorage)(nil).GetByOrderNumber), ctx, orderNumber)
}

// GetRegisteredOrders mocks base method.
func (m *MockStorage) GetRegisteredOrders(ctx context.Context) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredOrders", ctx)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredOrders indicates an expected call of GetRegisteredOrders.
func (mr *MockStorageMockRecorder) GetRegisteredOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredOrders", reflect.TypeOf((*MockStorage)(nil).GetRegisteredOrders), ctx)
}

// SaveGoods mocks base method.
func (m *MockStorage) SaveGoods(ctx context.Context, goods models.Goods) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGoods", ctx, goods)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGoods indicates an expected call of SaveGoods.
func (mr *MockStorageMockRecorder) SaveGoods(ctx, goods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGoods", reflect.TypeOf((*MockStorage)(nil).SaveGoods), ctx, goods)
}

// SaveOrderItems mocks base method.
func (m *MockStorage) SaveOrderItems(ctx context.Context, items models.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderItems", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrderItems indicates an expected call of SaveOrderItems.
func (mr *MockStorageMockRecorder) SaveOrderItems(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderItems", reflect.TypeOf((*MockStorage)(nil).SaveOrderItems), ctx, items)
}

// SaveOrderPoints mocks base method.
func (m *MockStorage) SaveOrderPoints(ctx context.Context, orderID int64, points []float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderPoints", ctx, orderID, points)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrderPoints indicates an expected call of SaveOrderPoints.
func (mr *MockStorageMockRecorder) SaveOrderPoints(ctx, orderID, points interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderPoints", reflect.TypeOf((*MockStorage)(nil).SaveOrderPoints), ctx, orderID, points)
}

// UpdateOrderStatus mocks base method.
func (m *MockStorage) UpdateOrderStatus(ctx context.Context, orderNumber int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, orderNumber, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStorageMockRecorder) UpdateOrderStatus(ctx, orderNumber, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStorage)(nil).UpdateOrderStatus), ctx, orderNumber, status)
}
