// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/services/user/user_service.go

// Package user is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Erlast/loyalty-gophermart.git/internal/gophermart/models"
	gomock "github.com/golang/mock/gomock"
	v5 "github.com/jackc/pgx/v5"
)

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockUserStore) BeginTx(ctx context.Context) (v5.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(v5.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockUserStoreMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockUserStore)(nil).BeginTx), ctx)
}

// CreateUserTx mocks base method.
func (m *MockUserStore) CreateUserTx(ctx context.Context, tx v5.Tx, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", ctx, tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockUserStoreMockRecorder) CreateUserTx(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockUserStore)(nil).CreateUserTx), ctx, tx, user)
}

// GetUserByLogin mocks base method.
func (m *MockUserStore) GetUserByLogin(ctx context.Context, login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserStoreMockRecorder) GetUserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserStore)(nil).GetUserByLogin), ctx, login)
}

// MockBalanceStore is a mock of BalanceStore interface.
type MockBalanceStore struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceStoreMockRecorder
}

// MockBalanceStoreMockRecorder is the mock recorder for MockBalanceStore.
type MockBalanceStoreMockRecorder struct {
	mock *MockBalanceStore
}

// NewMockBalanceStore creates a new mock instance.
func NewMockBalanceStore(ctrl *gomock.Controller) *MockBalanceStore {
	mock := &MockBalanceStore{ctrl: ctrl}
	mock.recorder = &MockBalanceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceStore) EXPECT() *MockBalanceStoreMockRecorder {
	return m.recorder
}

// CreateBalanceTx mocks base method.
func (m *MockBalanceStore) CreateBalanceTx(ctx context.Context, tx v5.Tx, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalanceTx", ctx, tx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBalanceTx indicates an expected call of CreateBalanceTx.
func (mr *MockBalanceStoreMockRecorder) CreateBalanceTx(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalanceTx", reflect.TypeOf((*MockBalanceStore)(nil).CreateBalanceTx), ctx, tx, userID)
}
