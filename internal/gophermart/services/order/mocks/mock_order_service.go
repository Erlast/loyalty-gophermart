// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/services/order/order_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Erlast/loyalty-gophermart.git/internal/gophermart/models"
	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
)

// MockOrderStorage is a mock of OrderStorage interface.
type MockOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorageMockRecorder
}

// MockOrderStorageMockRecorder is the mock recorder for MockOrderStorage.
type MockOrderStorageMockRecorder struct {
	mock *MockOrderStorage
}

// NewMockOrderStorage creates a new mock instance.
func NewMockOrderStorage(ctrl *gomock.Controller) *MockOrderStorage {
	mock := &MockOrderStorage{ctrl: ctrl}
	mock.recorder = &MockOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorage) EXPECT() *MockOrderStorageMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockOrderStorage) BeginTx(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockOrderStorageMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockOrderStorage)(nil).BeginTx), ctx)
}

// CheckOrder mocks base method.
func (m *MockOrderStorage) CheckOrder(ctx context.Context, orderNumber string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrder", ctx, orderNumber)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrder indicates an expected call of CheckOrder.
func (mr *MockOrderStorageMockRecorder) CheckOrder(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrder", reflect.TypeOf((*MockOrderStorage)(nil).CheckOrder), ctx, orderNumber)
}

// CreateOrder mocks base method.
func (m *MockOrderStorage) CreateOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderStorageMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderStorage)(nil).CreateOrder), ctx, order)
}

// GetOrdersByStatus mocks base method.
func (m *MockOrderStorage) GetOrdersByStatus(ctx context.Context, statuses ...models.OrderStatus) ([]models.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range statuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrdersByStatus", varargs...)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByStatus indicates an expected call of GetOrdersByStatus.
func (mr *MockOrderStorageMockRecorder) GetOrdersByStatus(ctx interface{}, statuses ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, statuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByStatus", reflect.TypeOf((*MockOrderStorage)(nil).GetOrdersByStatus), varargs...)
}

// GetOrdersByUserID mocks base method.
func (m *MockOrderStorage) GetOrdersByUserID(ctx context.Context, userID int64) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockOrderStorageMockRecorder) GetOrdersByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockOrderStorage)(nil).GetOrdersByUserID), ctx, userID)
}

// UpdateOrder mocks base method.
func (m *MockOrderStorage) UpdateOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderStorageMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderStorage)(nil).UpdateOrder), ctx, order)
}

// UpdateOrderTx mocks base method.
func (m *MockOrderStorage) UpdateOrderTx(ctx context.Context, tx pgx.Tx, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderTx", ctx, tx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderTx indicates an expected call of UpdateOrderTx.
func (mr *MockOrderStorageMockRecorder) UpdateOrderTx(ctx, tx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderTx", reflect.TypeOf((*MockOrderStorage)(nil).UpdateOrderTx), ctx, tx, order)
}

// MockBalanceStorage is a mock of BalanceStorage interface.
type MockBalanceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceStorageMockRecorder
}

// MockBalanceStorageMockRecorder is the mock recorder for MockBalanceStorage.
type MockBalanceStorageMockRecorder struct {
	mock *MockBalanceStorage
}

// NewMockBalanceStorage creates a new mock instance.
func NewMockBalanceStorage(ctrl *gomock.Controller) *MockBalanceStorage {
	mock := &MockBalanceStorage{ctrl: ctrl}
	mock.recorder = &MockBalanceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceStorage) EXPECT() *MockBalanceStorageMockRecorder {
	return m.recorder
}

// UpdateBalanceTx mocks base method.
func (m *MockBalanceStorage) UpdateBalanceTx(ctx context.Context, tx pgx.Tx, userID int64, accrual float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceTx", ctx, tx, userID, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceTx indicates an expected call of UpdateBalanceTx.
func (mr *MockBalanceStorageMockRecorder) UpdateBalanceTx(ctx, tx, userID, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceTx", reflect.TypeOf((*MockBalanceStorage)(nil).UpdateBalanceTx), ctx, tx, userID, accrual)
}

// MockAccrualService is a mock of AccrualService interface.
type MockAccrualService struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualServiceMockRecorder
}

// MockAccrualServiceMockRecorder is the mock recorder for MockAccrualService.
type MockAccrualServiceMockRecorder struct {
	mock *MockAccrualService
}

// NewMockAccrualService creates a new mock instance.
func NewMockAccrualService(ctrl *gomock.Controller) *MockAccrualService {
	mock := &MockAccrualService{ctrl: ctrl}
	mock.recorder = &MockAccrualServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualService) EXPECT() *MockAccrualServiceMockRecorder {
	return m.recorder
}

// GetAccrualInfo mocks base method.
func (m *MockAccrualService) GetAccrualInfo(orderNumber string) (*models.AccrualResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccrualInfo", orderNumber)
	ret0, _ := ret[0].(*models.AccrualResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccrualInfo indicates an expected call of GetAccrualInfo.
func (mr *MockAccrualServiceMockRecorder) GetAccrualInfo(orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccrualInfo", reflect.TypeOf((*MockAccrualService)(nil).GetAccrualInfo), orderNumber)
}
